# https://github.com/johannyren/PowerDisplayESPHome/blob/main/power-display-esphome.yaml
substitutions:
  device_name:  "esphome-energy-matrix"
esphome:
  name: ${device_name}
# Enable the preferences library
  libraries:
    - Preferences

#   includes:
#     - energy-matrix.h

# # Save values before shutting down
#   on_shutdown:
#     then:
#       lambda: |-
#         SaveValuesToNVM ();
#         return;

esp32:
  board: esp32dev
  framework:
    type: esp-idf


# Enable logging
logger:
  logs:
    component: ERROR

# Enable Home Assistant API
api:

ota:
  - platform: esphome

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_ssid_zeist
    password: !secret wifi_password_zeist
  reboot_timeout: 60s

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Energy Matrix Fallback"

time:
  - platform: homeassistant
    id: homeassistant_time

# color:

# # Define sensors in HomeAssistant that we use for data
# sensor:
#   # # Current import (unit is W - if you meter is using kW then it needs conversion)
#   # - platform: homeassistant
#   #   id: import_el
#   #   entity_id: sensor.momentary_active_import

#   # # Current export (if having solar production or similar, otherwise comment this out)    
#   # - platform: homeassistant
#   #   id: export_el
#   #   entity_id: sensor.momentary_active_export

#   # Electricity prices from NordPool. Expecting Home Assistant ENTSO-E Integration. https://github.com/JaccoR/hass-entso-e
#   - platform: homeassistant
#     id: entso_max  
#     entity_id: sensor.elektriciteit_hoogste_prijs_vandaag

#   # // From NordPool, but you can also use Tibber etc.
#   - platform: homeassistant
#     id: price_now
#     entity_id: sensor.elektriciteit_huidige_markt_prijs

#   # # Utility meter template in HomeAssistant. See example below (goes into configuration.yaml in HA.)  
#   # - platform: homeassistant
#   #   id: consumption_today
#   #   entity_id: sensor.forbrukning_huset_per_dag

#   # Example:
#   # utility_meter:
#   # produktion_huset_per_dag:
#   #   source: sensor.cumulative_active_export
#   #   cycle: daily
  

# text_sensor:
#   - platform: homeassistant # Entso-E
#     id: entso_today
#     entity_id: sensor.elektriciteit_gemiddelde_prijs_vandaag
#     attribute: prices_today
#   - platform: homeassistant # Entso-E
#     id: entso_tomorrow
#     entity_id: sensor.elektriciteit_gemiddelde_prijs_vandaag
#     attribute: prices_tomorrow

#--------- LED matrix ----------------
light:
  - platform: neopixelbus
    id: led_matrix_light
    name: "Led matrix"
    internal: True
    pin: GPIO13
    num_leds: 64
    variant: WS2812
    type: GRB

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 25
    id: gpio_backlight_pwm
    
# Note: library has been renamed from ili9341 to ili9xxx in ESPHome 2023.3.0. Use old name if using older version
display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: led_matrix_light
    width: 8
    height: 8
    rotation: 180Â°
    # update_interval: 16ms
    update_interval: 10s
    lambda: |-
          
          // static EnergyMatrix energyMatrix;  
      
          // // Unit is W - if your meter is reporting kW then it needs conversion (multiply value by 1000)
          // // energyMatrix.SetCurrentPower((id(import_el).state - id(export_el).state));  // Use if using solar production
          // // energyMatrix.SetCurrentPower(id(import_el).state);  // Use if not using any solar production

          // energyMatrix.SetCurrentPrice(id(price_now).state);
          // energyMatrix.SetTodayMaxPrice(id(entso_max).state);
          // energyMatrix.SetTodaysPrices(id(entso_today).state.c_str());
          // energyMatrix.SetTomorrowsPrices(id(entso_tomorrow).state.c_str());

          // // energyMatrix.SetDailyEnergy(id(consumption_today).state);
          // 
          // //  energyMatrix.DisplayIcons(&it, 10, 10);
          // // energyMatrix.WritePowerText(&it, 120, 40);
          // // energyMatrix.WriteDailyAmount(&it, 120, 75, id(COLOR_CSS_WHITESMOKE));

          // // Usable???
          // //  energyMatrix.CreateGraph(&it, 15, 115, 220, 100, my_grey);
          // //  energyMatrix.SetGraphGrid(&it, 0, 2, 0, 1, my_grey);
          // //  energyMatrix.writeTimeAxis(&it, id(homeassistant_time).now().hour, id(homeassistant_time).now().minute, id(COLOR_CSS_WHITESMOKE));
          // //  energyMatrix.SetPrices("today");
          // //  energyMatrix.SetPrices("tomorrow");
          // //  energyMatrix.DrawPriceGraph(&it);
          // //  energyMatrix.WritePriceText(&it, 120, 297);
      
          // clear screen
          it.fill(COLOR_OFF); 
          // draw rectangle
          // EnergyMatrix.testRectangle(&it, 0, 0, 6, 6);

          // Test screen
          // Draw a bulls-eye pattern
          Color red = Color(0xFF0000);
          Color green = Color(0x00FF00);
          Color blue = Color(0x0000FF);
          it.rectangle(0, 0, 8, 8, red);
          it.rectangle(1, 1, 6, 6, green);
          it.rectangle(2, 2, 4, 4, blue);
          it.rectangle(3, 3, 2, 2, red);

# Save global values every 1 minute. This is to quickly resume from a reboot and retain calculated values.
# interval:
#   - interval: 60s
#     then:
#       - lambda: |-
#           SaveValuesToNVM();
    
captive_portal:
    